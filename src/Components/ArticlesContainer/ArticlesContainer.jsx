import React from 'react';import style from './ArticlesContainer.module.css';import {connect} from 'react-redux';import Loader from "../Common/Loader";import { withRouter} from "react-router-dom";import {compose} from "redux";import MyArticle from "./myArticle/MyArticle";import {  deleteArticleMenuThunkCreator, getMenuArticlesThunkCreator, postArticleMenuThunkCreator, updateArticleMenuThunkCreator,} from "../../redux/menuCategoryReducer";class ArticlesContainer extends React.Component {  constructor() {    super();    this.state = {      category: ''    }  }  componentDidMount() {    let categoryId = this.props.match.params.categoryId;    this.props.getMenuArticlesThunkCreator(categoryId)  }  render() {    const onSubmit = (event) => {      event.preventDefault()      let categoryId = this.props.match.params.categoryId;      console.log(categoryId)      this.props.postArticleMenuThunkCreator(this.state.category, undefined, undefined, categoryId)      this.setState({category: ''})    };    const onChange = (event) => {      this.setState({category: event.target.value})    };    return (      <div className={style.recipesMenu}>        {!this.props.isLoaded ? <Loader/> : null}        <h1 className={style.articleTitle}>Articles</h1>        <form className={style.addRecipe} onSubmit={onSubmit}>          <input className={style.searchBar} type="text" value={this.state.category} onChange={onChange}/>          <button className={style.searchButton} type="submit">Add</button>        </form>        <div className={style.myRecipes}>            {this.props.articlesOfMenu.map(article => <MyArticle title={article.title}                                                                 text={article.text}                                                                 description={article.description}                                                                 key={article._id}                                                                 id={article._id}                                                                 categoryId={article.categoryId}                                                                 updateArticleMenuThunkCreator={this.props.updateArticleMenuThunkCreator}                                                                 deleteArticleMenuThunkCreator={this.props.deleteArticleMenuThunkCreator}/>)}        </div>      </div>    )  }}const mapStateToProps = (state) => {  return {    articlesOfMenu: state.menuCategories.articlesOfMenu,    isLoaded: state.menuCategories.isLoaded  }}export default compose(  connect(mapStateToProps, {    getMenuArticlesThunkCreator,    postArticleMenuThunkCreator,    updateArticleMenuThunkCreator,    deleteArticleMenuThunkCreator  }),  withRouter)(ArticlesContainer);