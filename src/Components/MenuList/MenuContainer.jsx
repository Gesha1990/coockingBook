import React from 'react';import style from './MenuContainer.module.css'import {connect} from 'react-redux'import Category from "./Category/Category";import {  deleteMenuCategoryThunkCreator, getAllMenuCategoriesThunkCreator,  postMenuCategoryThunkCreator, updateMenuCategoryThunkCreator} from "../../redux/menuCategoryReducer";import Loader from "../Common/Loader";import {withRouter} from "react-router-dom";import {compose} from "redux";class MenuContainer extends React.Component {  constructor() {    super();    this.state = {      category: ''    }  }  componentDidMount() {    this.props.getAllMenuCategoriesThunkCreator()  }  render() {    const onSubmit = (event) => {      event.preventDefault()      this.props.postMenuCategoryThunkCreator(this.state.category);      this.setState({category: ''})    };    const onChange = (event) => {      this.setState({category: event.target.value})    };    return (      <div className={style.menu}>        {!this.props.isLoaded ? <Loader/> : null}        <h1 className={style.titleMenu}>Menu</h1>        <form className={style.searchForm} onSubmit={onSubmit}>          <input className={style.searchBar} type="text" value={this.state.category} onChange={onChange}/>          <button className={style.searchButton} type="submit">Add</button>        </form>        <div className={style.categoriesOfMenu}>          <ul>            {this.props.categoriesOfMenu.map(category => <Category title={category.title}                                                                   key={category._id}                                                                   id={category._id}                                                                   deleteMenuCategoryThunkCreator={this.props.deleteMenuCategoryThunkCreator}                                                                   updateMenuCategoryThunkCreator={this.props.updateMenuCategoryThunkCreator}/>)}          </ul>        </div>      </div>    )  }}const mapStateToProps = (state) => {  return {    categoriesOfMenu: state.menuCategories.categoriesOfMenu,    isLoaded: state.menuCategories.isLoaded  }}export default compose(  connect(mapStateToProps, {    postMenuCategoryThunkCreator,    deleteMenuCategoryThunkCreator,    getAllMenuCategoriesThunkCreator,    updateMenuCategoryThunkCreator,  }),  withRouter)(MenuContainer);