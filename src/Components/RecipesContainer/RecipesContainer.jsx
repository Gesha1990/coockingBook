import React from 'react';import style from './RecipesContainer.module.css';import {connect} from 'react-redux';import Loader from "../Common/Loader";import {NavLink, withRouter} from "react-router-dom";import {compose} from "redux";import MyRecipe from "./myRecipe/MyRecipe";import {  deleteMenuRecipeThunkCreator,  getMenuRecipesThunkCreator, postRecipeMenuThunkCreator, updateRecipeMenuThunkCreator} from "../../redux/menuCategoryReducer";class RecipesContainer extends React.Component {  constructor() {    super();    this.state = {      category: ''    }  }  componentDidMount() {    let categoryId = this.props.match.params.categoryId;    this.props.getMenuRecipesThunkCreator(categoryId)  }  render() {    const onSubmit = (event) => {      event.preventDefault()      let categoryId = this.props.match.params.categoryId;      this.props.postRecipeMenuThunkCreator(this.state.category, undefined, categoryId)      this.setState({category: ''})    };    const onChange = (event) => {      this.setState({category: event.target.value})    };    return (      <div className={style.recipesMenu}>        {!this.props.isLoaded ? <Loader/> : null}        <h1 className={style.recipesTitle}>Recipes</h1>        <form className={style.addRecipe} onSubmit={onSubmit}>          <input className={style.searchBar} type="text" value={this.state.category} onChange={onChange}/>          <button className={style.searchButton} type="submit">Add</button>        </form>        <div className={style.myRecipes}>            {this.props.recipesOfMenu.map(recipe => <MyRecipe title={recipe.title}                                                              text={recipe.text}                                                              key={recipe._id}                                                              id={recipe._id}                                                              categoryId={recipe.categoryId}                                                              updateRecipeMenuThunkCreator={this.props.updateRecipeMenuThunkCreator}                                                              deleteMenuRecipeThunkCreator={this.props.deleteMenuRecipeThunkCreator}/>)}        </div>      </div>    )  }}const mapStateToProps = (state) => {  return {    recipesOfMenu: state.menuCategories.recipesOfMenu,    isLoaded: state.menuCategories.isLoaded  }}export default compose(  connect(mapStateToProps, {    getMenuRecipesThunkCreator,    postRecipeMenuThunkCreator,    updateRecipeMenuThunkCreator,    deleteMenuRecipeThunkCreator  }),  withRouter)(RecipesContainer);